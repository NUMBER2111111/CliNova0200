Hereâ€™s Phase 4: Analytics & Remote Config API for your Clinova Node.js backend.

10. routes/analytics.js
js
Copy code
const express = require('express');
const router = express.Router();
const { verifyFirebaseToken } = require('../middleware/authMiddleware');
const { firestore } = require('../services/firebase');

// For this MVP, we'll provide a simple endpoint returning basic analytics data.
// In production, you may integrate with Firebase BigQuery export or Google Analytics APIs.

router.use(verifyFirebaseToken);

router.get('/subscriptions-summary', async (req, res) => {
  try {
    const subsRef = firestore.collection('users').doc(req.user.uid).collection('subscriptions');
    const subsSnap = await subsRef.get();

    let totalSpent = 0;
    subsSnap.forEach(doc => {
      const data = doc.data();
      if (data.price) totalSpent += Number(data.price);
    });

    res.json({
      subscriptionCount: subsSnap.size,
      totalSpent,
    });
  } catch (error) {
    console.error('Error fetching subscriptions summary:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;
11. routes/remoteConfig.js
js
Copy code
const express = require('express');
const router = express.Router();
const { verifyFirebaseToken } = require('../middleware/authMiddleware');
const { admin } = require('../services/firebase');

router.use(verifyFirebaseToken);

// Get current Remote Config template
router.get('/', async (req, res) => {
  try {
    const remoteConfig = admin.remoteConfig();
    const template = await remoteConfig.getTemplate();
    res.json(template);
  } catch (error) {
    console.error('Error fetching remote config:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Update Remote Config parameters (simple example)
router.post('/', async (req, res) => {
  try {
    const remoteConfig = admin.remoteConfig();
    const template = await remoteConfig.getTemplate();

    // Assume req.body contains parameters to update
    const paramsToUpdate = req.body.parameters || {};

    for (const [key, value] of Object.entries(paramsToUpdate)) {
      template.parameters[key] = {
        defaultValue: { value: String(value) },
      };
    }

    const updatedTemplate = await remoteConfig.publishTemplate(template);
    res.json(updatedTemplate);
  } catch (error) {
    console.error('Error updating remote config:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;
Add the remote config route in app.js:

js
Copy code
const remoteConfigRoutes = require('./routes/remoteConfig');
app.use('/api/remote-config', remoteConfigRoutes);
This phase provides endpoints to:

Get a summary of user subscriptions analytics (simple sum and count)

Manage Firebase Remote Config parameters remotely

Ready to proceed with Phase 5 or need help testing these?








Ask ChatGPT
